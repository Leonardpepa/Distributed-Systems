# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bank_pb2 as bank__pb2


class BankStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.info = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/info',
                request_serializer=bank__pb2.GenericRequest.SerializeToString,
                response_deserializer=bank__pb2.InfoResponse.FromString,
                )
        self.statements = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/statements',
                request_serializer=bank__pb2.GenericRequest.SerializeToString,
                response_deserializer=bank__pb2.StatementResponse.FromString,
                )
        self.balance = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/balance',
                request_serializer=bank__pb2.GenericRequest.SerializeToString,
                response_deserializer=bank__pb2.BalanceResponse.FromString,
                )
        self.login = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/login',
                request_serializer=bank__pb2.AuthRequest.SerializeToString,
                response_deserializer=bank__pb2.LoginResponse.FromString,
                )
        self.register = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/register',
                request_serializer=bank__pb2.RegisterRequest.SerializeToString,
                response_deserializer=bank__pb2.RegisterResponse.FromString,
                )
        self.deposit = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/deposit',
                request_serializer=bank__pb2.DepositRequest.SerializeToString,
                response_deserializer=bank__pb2.DepositResponse.FromString,
                )
        self.withdraw = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/withdraw',
                request_serializer=bank__pb2.WithdrawRequest.SerializeToString,
                response_deserializer=bank__pb2.WithdrawResponse.FromString,
                )
        self.transfer = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/transfer',
                request_serializer=bank__pb2.TransferRequest.SerializeToString,
                response_deserializer=bank__pb2.TransferResponse.FromString,
                )
        self.logout = channel.unary_unary(
                '/org.bank.grpc.Bank.Bank/logout',
                request_serializer=bank__pb2.Empty.SerializeToString,
                response_deserializer=bank__pb2.Ok.FromString,
                )


class BankServicer(object):
    """Missing associated documentation comment in .proto file."""

    def info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def statements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def withdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'info': grpc.unary_unary_rpc_method_handler(
                    servicer.info,
                    request_deserializer=bank__pb2.GenericRequest.FromString,
                    response_serializer=bank__pb2.InfoResponse.SerializeToString,
            ),
            'statements': grpc.unary_unary_rpc_method_handler(
                    servicer.statements,
                    request_deserializer=bank__pb2.GenericRequest.FromString,
                    response_serializer=bank__pb2.StatementResponse.SerializeToString,
            ),
            'balance': grpc.unary_unary_rpc_method_handler(
                    servicer.balance,
                    request_deserializer=bank__pb2.GenericRequest.FromString,
                    response_serializer=bank__pb2.BalanceResponse.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=bank__pb2.AuthRequest.FromString,
                    response_serializer=bank__pb2.LoginResponse.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=bank__pb2.RegisterRequest.FromString,
                    response_serializer=bank__pb2.RegisterResponse.SerializeToString,
            ),
            'deposit': grpc.unary_unary_rpc_method_handler(
                    servicer.deposit,
                    request_deserializer=bank__pb2.DepositRequest.FromString,
                    response_serializer=bank__pb2.DepositResponse.SerializeToString,
            ),
            'withdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.withdraw,
                    request_deserializer=bank__pb2.WithdrawRequest.FromString,
                    response_serializer=bank__pb2.WithdrawResponse.SerializeToString,
            ),
            'transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.transfer,
                    request_deserializer=bank__pb2.TransferRequest.FromString,
                    response_serializer=bank__pb2.TransferResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=bank__pb2.Empty.FromString,
                    response_serializer=bank__pb2.Ok.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.bank.grpc.Bank.Bank', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bank(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/info',
            bank__pb2.GenericRequest.SerializeToString,
            bank__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def statements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/statements',
            bank__pb2.GenericRequest.SerializeToString,
            bank__pb2.StatementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/balance',
            bank__pb2.GenericRequest.SerializeToString,
            bank__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/login',
            bank__pb2.AuthRequest.SerializeToString,
            bank__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/register',
            bank__pb2.RegisterRequest.SerializeToString,
            bank__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deposit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/deposit',
            bank__pb2.DepositRequest.SerializeToString,
            bank__pb2.DepositResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def withdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/withdraw',
            bank__pb2.WithdrawRequest.SerializeToString,
            bank__pb2.WithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/transfer',
            bank__pb2.TransferRequest.SerializeToString,
            bank__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bank.grpc.Bank.Bank/logout',
            bank__pb2.Empty.SerializeToString,
            bank__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
